#include <iostream>
#include <vector>
#include <list>
#include <string>
using namespace std;

//A hash map is a form of hash table that stores key-value pairs.
//This allows for searching, adding, modifying, and removing entries of keys with their values.
//Definition of Terms:
//Entry - key-value pair ("24-0920-213", "Gianne")
//Key - Unique identifier to access values. (e.g. ID number for student info)
//Value - The actual data associated with the key. (Student info)
//Hash Code - number generated by hash function to determine which bucket to store.
//Bucket - Container where entries with the same hash are stored.

struct Entry {
    string key, value;
};

class HashMap{
private:
    //You can just do separate vector lists for keys and values.
    vector<list<Entry>> buckets; //You can use vector<list<pair<string, string>>>, std::pair from <utility> header
    int size;

public: 
    HashMap(int size) : size(size), buckets(size){}
    int hashFunction(const string& key);
    void addToBucket(const string& key, const string& value);
    void getValueFromKey(const string& key);
    void display();
    void deleteData(const string& str);
};

//using const string& can help save memory
//calling .addToBucket("asd", "asdasd") creates temporary string objects, then inside the function, a copy of them is made.
int HashMap::hashFunction(const string& key){ 
    int sum = 0;
    for (char ch : key){
        sum+=(int)ch;
    }
    return sum%size;
}

void HashMap::addToBucket(const string& key, const string& value){
    int ind = hashFunction(key);
    for (const list<Entry> &b : buckets){
        for (const Entry &e : b){
            if(e.key == key){
                cout << e.key << " entry already exists: " << e.value << endl;
                return;
            }
            else if(e.value == value){
                cout << e.value << " entry already exists: " << e.key << endl;
                return;
            }
        }
    }
    
    buckets[ind].push_back(Entry{key, value});
    cout << "Successfully added: " << key << " - " << value << endl;
}

void HashMap::getValueFromKey(const string& key){
    int ind = hashFunction(key);
    for (Entry &e : buckets[ind]){
        if(e.key == key){
            cout << e.key << " - " << e.value << endl;
            return;
        }
    }
    cout << key << " does not exist.\n";
}

void HashMap::display(){
    for (int i = 0; i<size; i++){
        cout << "\nBucket: " << i << endl;
        int count = 1;
        for(Entry &e : buckets[i]){
            cout <<  count << ". " << e.key << " - " << e.value << endl;
            count++;
        }
    }
}

void HashMap::deleteData(const string& key){
    int ind = hashFunction(key);
    for(list<Entry>::iterator it = buckets[ind].begin(); it!=buckets[ind].end(); it++){
        if (it->key==key){
            cout << it->key << " successfully deleted.\n";
            buckets[ind].erase(it);
            return;
        }
    }
    cout << key << " does not exist.\n";
}

int main (){
    HashMap h1(5);
    h1.addToBucket("24-0920-213", "Charlone Gianne V. Cruz");
    h1.addToBucket("24-6041-978", "Crissa May P. Econas");
    h1.addToBucket("24-1234-123", "Juan Dela Cruz");
    h1.addToBucket("24-1234-123", "MAMAMIA");
    h1.addToBucket("24-1234-234", "Juan Dela Cruz");
    h1.addToBucket("24-4567-789", "Lala lolo");
    h1.addToBucket("24-7899-125", "koko loko");
    h1.addToBucket("24-9023-123", "MAMAMIA");

    h1.display();

    h1.deleteData("24-7899-125");
    h1.display();
}